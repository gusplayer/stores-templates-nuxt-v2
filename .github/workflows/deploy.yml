name: Deploy Nuxt 3 App

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          
      - name: Create app directory and copy files to VPS
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /home/${{ secrets.SERVER_USER }}/app"
          rsync -avz --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.github' \
            --exclude '.nuxt' \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}/app
            
      - name: Deploy with Docker
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd /home/${{ secrets.SERVER_USER }}/app
            
            if docker ps | grep -q nuxt_app; then
              echo "Stopping existing container..."
              docker stop nuxt_app
            fi
            
            docker build -t ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }} .
            docker tag ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }} ${{ secrets.DOCKER_IMAGE }}:latest
            
            docker rm nuxt_app || true
            
            docker run -d \
              --name nuxt_app \
              --restart unless-stopped \
              -p 80:3000 \
              --health-cmd="curl -f http://localhost:3000 || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              ${{ secrets.DOCKER_IMAGE }}:latest
              
            docker image prune -f
          EOF
          
      - name: Verify deployment
        run: |
          sleep 30
          curl -f http://${{ secrets.SERVER_IP }} || exit 1