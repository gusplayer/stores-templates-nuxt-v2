"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveCFNParameters = exports.saveMutableState = exports.updateLayerArtifacts = exports.createLayerArtifacts = exports.createFunctionResources = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const constants_1 = require("./constants");
const constants_2 = require("../../../constants");
const lambda_layer_cloudformation_template_1 = require("./lambda-layer-cloudformation-template");
const lodash_1 = __importDefault(require("lodash"));
const layerArnConverter_1 = require("./layerArnConverter");
function createFunctionResources(context, parameters) {
    context.amplify.updateamplifyMetaAfterResourceAdd(constants_2.category, parameters.resourceName || parameters.functionName, translateFuncParamsToResourceOpts(parameters));
    copyTemplateFiles(context, parameters);
    saveMutableState(context, parameters);
    saveCFNParameters(context, parameters);
    context.amplify.leaveBreadcrumbs(context, constants_2.category, parameters.resourceName, createBreadcrumbs(parameters));
}
exports.createFunctionResources = createFunctionResources;
exports.createLayerArtifacts = (context, parameters) => {
    const layerDirPath = ensureLayerFolders(context, parameters);
    createLayerParametersFile(context, parameters, layerDirPath);
    createParametersFile(context, {}, parameters.layerName, 'parameters.json');
    createLayerCfnFile(context, parameters, layerDirPath);
    addLayerToAmplifyMeta(context, parameters);
    return layerDirPath;
};
const defaultOpts = {
    layerParams: true,
    cfnFile: true,
    amplifyMeta: true,
};
exports.updateLayerArtifacts = (context, parameters, options = {}) => {
    options = lodash_1.default.assign(defaultOpts, options);
    const layerDirPath = ensureLayerFolders(context, parameters);
    if (options.layerParams) {
        createLayerParametersFile(context, parameters, layerDirPath);
    }
    if (options.cfnFile) {
        updateLayerCfnFile(context, parameters, layerDirPath);
    }
    if (options.amplifyMeta) {
        updateLayerInAmplifyMeta(context, parameters);
    }
    return layerDirPath;
};
function saveMutableState(context, parameters) {
    createParametersFile(context, buildParametersFileObj(parameters), parameters.resourceName || parameters.functionName, constants_1.functionParametersFileName);
}
exports.saveMutableState = saveMutableState;
function saveCFNParameters(context, parameters) {
    if ('trigger' in parameters) {
        const params = {
            modules: parameters.modules.join(),
            resourceName: parameters.resourceName,
        };
        createParametersFile(context, params, parameters.resourceName, constants_1.parametersFileName);
    }
    if ('cloudwatchRule' in parameters) {
        const params = {
            CloudWatchRule: parameters.cloudwatchRule,
        };
        createParametersFile(context, params, parameters.resourceName, constants_1.parametersFileName);
    }
}
exports.saveCFNParameters = saveCFNParameters;
function copyTemplateFiles(context, parameters) {
    const destDir = context.amplify.pathManager.getBackendDirPath();
    const copyJobs = parameters.functionTemplate.sourceFiles.map(file => {
        return {
            dir: parameters.functionTemplate.sourceRoot,
            template: file,
            target: path_1.default.join(destDir, constants_2.category, parameters.resourceName, lodash_1.default.get(parameters.functionTemplate.destMap, file, file.replace(/\.ejs$/, ''))),
        };
    });
    let templateParams = parameters;
    if ('trigger' in parameters) {
        let triggerEnvs = context.amplify.loadEnvResourceParameters(context, 'function', parameters.resourceName);
        parameters.triggerEnvs = JSON.parse(parameters.triggerEnvs) || [];
        parameters.triggerEnvs.forEach(c => {
            triggerEnvs[c.key] = c.value;
        });
        templateParams = lodash_1.default.assign(templateParams, triggerEnvs);
    }
    context.amplify.copyBatch(context, copyJobs, templateParams, false);
    const cloudTemplateJob = {
        dir: '',
        template: parameters.cloudResourceTemplatePath,
        target: path_1.default.join(destDir, constants_2.category, parameters.resourceName, `${parameters.resourceName}-cloudformation-template.json`),
    };
    const copyJobParams = parameters;
    if ('lambdaLayers' in parameters) {
        const layerCFNValues = layerArnConverter_1.convertLambdaLayerMetaToLayerCFNArray(parameters.lambdaLayers);
        copyJobParams.lambdaLayersCFNArray = layerCFNValues;
    }
    context.amplify.copyBatch(context, [cloudTemplateJob], copyJobParams, false);
}
function ensureLayerFolders(context, parameters) {
    const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();
    const layerDirPath = path_1.default.join(projectBackendDirPath, constants_2.category, parameters.layerName);
    fs_extra_1.default.ensureDirSync(path_1.default.join(layerDirPath, 'opt'));
    parameters.runtimes.forEach(runtime => ensureLayerRuntimeFolder(layerDirPath, runtime));
    return layerDirPath;
}
function ensureLayerRuntimeFolder(layerDirPath, runtime) {
    const runtimeDirPath = path_1.default.join(layerDirPath, 'lib', runtime.layerExecutablePath);
    if (!fs_extra_1.default.pathExistsSync(runtimeDirPath)) {
        fs_extra_1.default.ensureDirSync(runtimeDirPath);
        fs_extra_1.default.writeFileSync(path_1.default.join(runtimeDirPath, 'README.txt'), 'Replace this file with your layer files');
        (runtime.layerDefaultFiles || []).forEach(defaultFile => fs_extra_1.default.writeFileSync(path_1.default.join(layerDirPath, 'lib', defaultFile.path, defaultFile.filename), defaultFile.content));
    }
}
function createLayerCfnFile(context, parameters, layerDirPath) {
    context.amplify.writeObjectAsJson(path_1.default.join(layerDirPath, parameters.layerName + '-awscloudformation-template.json'), lambda_layer_cloudformation_template_1.generateLayerCfnObj(context, parameters), true);
}
function updateLayerCfnFile(context, parameters, layerDirPath) {
    context.amplify.writeObjectAsJson(path_1.default.join(layerDirPath, parameters.layerName + '-awscloudformation-template.json'), lambda_layer_cloudformation_template_1.generateLayerCfnObj(context, parameters), true);
}
const addLayerToAmplifyMeta = (context, parameters) => context.amplify.updateamplifyMetaAfterResourceAdd(constants_2.category, parameters.layerName, layerParamsToAmplifyMetaParams(parameters));
const updateLayerInAmplifyMeta = (context, parameters) => {
    const metaParams = layerParamsToAmplifyMetaParams(parameters);
    context.amplify.updateamplifyMetaAfterResourceUpdate(constants_2.category, parameters.layerName, 'runtimes', metaParams.runtimes);
    context.amplify.updateamplifyMetaAfterResourceUpdate(constants_2.category, parameters.layerName, 'layerVersionMap', metaParams.layerVersionMap);
    context.amplify.updateamplifyMetaAfterResourceUpdate(constants_2.category, parameters.layerName, 'build', metaParams.build);
};
const createLayerParametersFile = (context, parameters, layerDirPath) => {
    fs_extra_1.default.ensureDirSync(layerDirPath);
    const parametersFilePath = path_1.default.join(layerDirPath, constants_1.layerParametersFileName);
    context.amplify.writeObjectAsJson(parametersFilePath, layerParamsToStoredParams(parameters), true);
};
const layerParamsToAmplifyMetaParams = (parameters) => {
    return lodash_1.default.assign(layerParamsToStoredParams(parameters), {
        providerPlugin: parameters.providerContext.provider,
        service: parameters.providerContext.service,
        build: parameters.build,
    });
};
const layerParamsToStoredParams = (parameters) => ({
    runtimes: (parameters.runtimes || []).map(runtime => lodash_1.default.pick(runtime, 'value', 'name', 'layerExecutablePath', 'cloudTemplateValue')),
    layerVersionMap: parameters.layerVersionMap,
});
function createParametersFile(context, parameters, resourceName, parametersFileName) {
    const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();
    const resourceDirPath = path_1.default.join(projectBackendDirPath, constants_2.category, resourceName);
    fs_extra_1.default.ensureDirSync(resourceDirPath);
    const parametersFilePath = path_1.default.join(resourceDirPath, parametersFileName);
    const currentParameters = fs_extra_1.default.existsSync(parametersFilePath) ? context.amplify.readJsonFile(parametersFilePath) : {};
    context.amplify.writeObjectAsJson(parametersFilePath, { ...currentParameters, ...parameters }, true);
}
function buildParametersFileObj(parameters) {
    if ('trigger' in parameters) {
        return lodash_1.default.omit(parameters, ['functionTemplate', 'cloudResourceTemplatePath']);
    }
    return lodash_1.default.pick(parameters, ['mutableParametersState', 'lambdaLayers']);
}
function translateFuncParamsToResourceOpts(params) {
    let result = {
        build: true,
        providerPlugin: constants_1.provider,
        service: "Lambda",
    };
    if (!('trigger' in params)) {
        result.dependsOn = params.dependsOn;
    }
    return result;
}
function createBreadcrumbs(params) {
    if ('trigger' in params) {
        return {
            pluginId: 'amplify-nodejs-function-runtime-provider',
            functionRuntime: 'nodejs',
            useLegacyBuild: true,
            defaultEditorFile: 'src/index.js',
        };
    }
    return {
        pluginId: params.runtimePluginId,
        functionRuntime: params.runtime.value,
        useLegacyBuild: params.runtime.value === 'nodejs' ? true : false,
        defaultEditorFile: params.functionTemplate.defaultEditorFile,
    };
}
//# sourceMappingURL=storeResources.js.map