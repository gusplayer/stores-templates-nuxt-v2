"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.write = exports.getConfig = exports.init = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const uuid_1 = __importDefault(require("uuid"));
const lodash_1 = __importDefault(require("lodash"));
const getPath_1 = require("./getPath");
function init(context) {
    const configPath = getPath_1.getPath(context);
    if (fs_extra_1.default.existsSync(configPath)) {
        try {
            const savedConfig = JSON.parse(fs_extra_1.default.readFileSync(configPath, { encoding: 'utf-8' }));
            Config.Instance.setValues(savedConfig);
            return getConfig();
        }
        catch (ex) {
            context.print.warning('Corrupted Config generating new config');
        }
    }
    write(context, Config.Instance);
    return getConfig();
}
exports.init = init;
function getConfig() {
    return Config.Instance;
}
exports.getConfig = getConfig;
function write(context, keyValues) {
    Config.Instance.setValues(keyValues);
    fs_extra_1.default.writeFileSync(getPath_1.getPath(context), JSON.stringify(Config.Instance));
}
exports.write = write;
class Config {
    constructor() {
        this.usageDataConfig = new UsageDataConfig();
    }
    static get Instance() {
        if (!this.instance) {
            this.instance = new Config();
        }
        return this.instance;
    }
    setValues(keyValues) {
        Config.instance = lodash_1.default.merge(Config.instance, keyValues);
    }
}
class UsageDataConfig {
    constructor() {
        this.installationUuid = uuid_1.default.v4();
        this.isUsageTrackingEnabled = true;
    }
}
//# sourceMappingURL=config.js.map